buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath(group: 'org.jfrog.buildinfo', name: 'build-info-extractor-gradle', version: '4.15.1')
    }
}

allprojects {
    repositories {
        maven {
            url "http://artifactory.ad.interset.com/artifactory/libs-snapshot-local"
        }
    }
}

apply plugin: 'es.hadoop.build.root'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'java'
apply plugin: 'maven-publish'


description = 'Elasticsearch for Apache Hadoop'

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}

artifactory {
    contextUrl = 'http://artifactory.ad.interset.com/artifactory'
    publish {
        repository {
            repoKey = 'libs-snapshot-local' // The Artifactory repository key to publish to
            username = 'build' // The publisher user name
            password = 'APBBv6jLtb7P6nTx' // The publisher password
        }
        defaults {
            // Reference to Gradle publications defined in the build script.
            // This is how we tell the Artifactory Plugin which artifacts should be
            // published to Artifactory.
            publications('mavenJava')
            publishArtifacts = true
            // Properties to be attached to the published artifacts.
            properties = ['qa.level': 'basic', 'dev.team' : 'core']
            // Publish generated POM files to Artifactory (true by default)
            publishPom = true
        }
    }
}



defaultTasks 'build'

build {
    dependsOn 'hadoopTestingJar'
}

task wrapper(type: Wrapper) {
    description = 'Generates gradlew[.bat] scripts'
    gradleVersion = '4.5'
}

// Simple utility task to help with downloading artifacts and jars
if (project.hasProperty("find-artifact")) {
    String artifact = project.getProperty("find-artifact")

    configurations {
        findJar
    }

    dependencies {
        findJar artifact
    }

    task find(type: Copy) {
        dependsOn configurations.findJar
        from configurations.findJar.first()
        into new File(rootProject.buildDir, 'found/')
        doLast {
            if (configurations.findJar.files.size() > 0) {
                String artifactName = configurations.findJar.first().name
                File found = new File(rootProject.buildDir, 'found/')
                logger.lifecycle("Found [$artifactName] and stored it in [$found]")
                if (configurations.findJar.size() > 1) {
                    configurations.findJar.each { logger.lifecycle("Also found other dependencies: [${ it.name }]") }
                }
            } else {
                logger.lifecycle("Could not find artifact [$artifact]")
            }
        }
    }
}
